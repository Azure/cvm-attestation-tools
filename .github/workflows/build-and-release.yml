name: Build and Release

on:
  push:
    branches:
      - github-build
  workflow_dispatch:
  pull_request_target:

permissions:
  contents: write  # Required for creating releases and uploading assets
  actions: read    # Default read access for actions

jobs:
  Build-On-Windows:
    runs-on: windows-2022
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Build
        shell: pwsh
        run: |
          cd ${{ github.workspace }}\cvm-attestation
          .\install.ps1
          pip install pyinstaller
          pyinstaller .\attest.py
          cp ${{ github.workspace }}\cvm-attestation\*.json ${{ github.workspace }}\cvm-attestation\dist\attest\
      - uses: actions/upload-artifact@v4
        with:
          name: attest-win
          path: ${{ github.workspace }}\cvm-attestation\dist\attest\*

  Build-On-Linux:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Build
        shell: bash
        run: |
          cd ${{ github.workspace }}/cvm-attestation
          ./install.sh
          sudo pip install pyinstaller
          sudo pyinstaller ./attest.py
          sudo cp ${{ github.workspace }}/cvm-attestation/*.json ${{ github.workspace }}/cvm-attestation/dist/attest/
      - uses: actions/upload-artifact@v4
        with:
          name: attest-lin
          path: ${{ github.workspace }}/cvm-attestation/dist/attest/*

  Create-Release:
    runs-on: ubuntu-22.04
    needs: [Build-On-Windows, Build-On-Linux]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: attest-win
          path: ./release-assets/windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: attest-lin
          path: ./release-assets/linux

      - name: Zip Windows artifact
        run: |
          cd ./release-assets/windows
          zip -r attest-win.zip *

      - name: Zip Linux artifact
        run: |
          cd ./release-assets/linux
          zip -r attest-lin.zip *

      - name: Get Latest Tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-creatordate | head -n 1 | sed 's/^v//')
          echo "latest_tag=${latest_tag:-0.0.0}" >> $GITHUB_OUTPUT

      - name: Bump Patch Version
        id: bump
        run: |
          pip install semver
          next_version=$(python -c "import semver; print(semver.bump_patch('${{ steps.get_tag.outputs.latest_tag }}'))")
          echo "next_version=${next_version}" >> $GITHUB_OUTPUT
          echo "v${next_version}" > VERSION.txt
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -am 'chore: bump version to v'${next_version}
          git tag v${next_version}
          git push origin v${next_version}
          git push

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump.outputs.next_version }}
          release_name: "Release v${{ steps.bump.outputs.next_version }}"
          body: |
            Automated release from GitHub Actions.
            Includes builds for Windows and Linux.
          draft: false
          prerelease: false

      - name: Generate Release Notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: .github/release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifact to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/windows/attest-win.zip
          asset_name: attest-win.zip
          asset_content_type: application/zip

      - name: Upload Linux artifact to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/linux/attest-lin.zip
          asset_name: attest-lin.zip
          asset_content_type: application/zip